<?php

namespace App\Exceptions;

use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    public function isApi(): bool
    {
        return request()->expectsJson();
    }

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {


        });
    }

    public function render($request, Throwable $e)
    {
        if ($this->isApi()) {
            if ($this->isHttp($e)) {
                return response()->json(['message' => 'Invalid Route'], Response::HTTP_NOT_FOUND);
            }
            if ($this->isModel($e)) {
                return response()->json(['message' => 'Model not found'], Response::HTTP_NOT_FOUND);
            }
        }
        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }


    public function isHttp(Throwable $e): bool
    {
        return $e instanceof NotFoundHttpException;
    }

    public function isModel(Throwable $e): bool
    {
        return $e instanceof ModelNotFoundException;
    }


}
